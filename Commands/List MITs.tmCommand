<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env python3
# encoding: utf-8

"""List tasks tagged with @mit in the HTML companion view as clickable links."""


import os
import sys
import re
from datetime import datetime, date, timedelta
import urllib


envvars = ['TM_BUNDLE_SUPPORT', 'TM_SUPPORT_PATH']
sys.path[:0] = [os.environ[v]+'/lib' for v in envvars if os.environ[v] not in sys.path]

import texttasks
import exit_codes as exit
import webpreview3 as wp
import applewrap


# FIXME: From config
MAIL_CLIENT = os.environ.get('TT_MAIL_CLIENT', 'mail').lower()

def format_output(task):
    FMT = u'&lt;p&gt;{t.project} : &lt;a href="{url}"&gt;{t.description}&lt;/a&gt;&lt;/p&gt;'
    TXMT_URL = u'txmt://open?url=file://{t.file}&amp;line={t.line}&amp;column={col}'

    url = TXMT_URL.format(col=1, t=task)
    #description = task['description'].decode('utf-8')
    # FIXME
    # notes = [task[key].decode('utf-8') for key in ['delegated', 'due'] if key in task]
    # if notes:
    #     description += u" ({})".format(", ".join(notes))

    return FMT.format(url=url, t=task)

def format_flagged_email(flagged):
    """_flagged_ is a tuple with (from, subject, message_id)"""
    sender, task, msg_id = flagged
    msg_id = urllib.parse.quote(msg_id)
    FMT = u'&lt;p&gt;{} : &lt;a href="#" onclick="{}"&gt;{}&lt;/a&gt; {}&lt;/p&gt;'
    MAIL_OPEN = u"open_mail('{}', '{}')"
    url = MAIL_OPEN.format(MAIL_CLIENT, str(msg_id))
    action = ""
    return FMT.format(sender, url, task, action)

def filter_due_list(due_list):
    then = date.today() + timedelta(days=14)
    new_list = []
    for due in due_list:
        due_string = due['due'].strip()
        try:
            when = datetime.strptime(due_string[-8:], "%y-%m-%d")
        except:
            # Badly formatted, don't list
            when = datetime.now() + timedelta(days=100)
        when = when.date()
        if when &lt; then:
            new_list.append(due)
    new_list = sorted(new_list, key=lambda k: k['due'])        
    return new_list

# def scan_all_projects_for_tag(tag):
#     TAGGED_TASK_TEMPLATE = r"^(\s*)-\s+(.+?)\s(?:\s*@.+?\s)*?@%s(?:\((.*?)\)\s*)?(?:\s*@.+?)*\s*$"
#     regex = TAGGED_TASK_TEMPLATE % tag
#     tagged_tasks = projects.scan_all_projects(regex)
#     for task in tagged_tasks:
#         task[tag] = task['match'].group(3)
#         task['description'] = task['match'].group(2)
#     return tagged_tasks

# FIXME: Extract all tags at once, then filter on tag
conf = texttasks.config()
projects = texttasks.TextTasks(conf.project_dirs, conf.file_exts)

scanner = texttasks.tag_scanner('mit')
mit_list = projects.scan(scanner)

then = date.today() + timedelta(days=14)
predicate = texttasks.date_predicate("&lt;=", then.strftime("%Y-%m-%d"))
scanner = texttasks.tag_scanner('due')
due_list = projects.scan(scanner)

scanner = texttasks.tag_scanner('delegated')
delegated_list = projects.scan(scanner)

# Check dates
# due_list = filter_due_list(due_list)
# Remove mits from due list
# FIXME:
# mit_tasks = [mit['task'] for mit in mit_list]
due_list = [due for due in due_list if due not in mit_list]
# Remove delegated from mit and due lists
# delegated_tasks = [delegated['task'] for delegated in delegated_list]
due_list = [due for due in due_list if due not in delegated_list]
mit_list = [mit for mit in mit_list if mit not in delegated_list]
# Get flagged emails
flagged_list = applewrap.get_flagged_emails(conf.mail_client)

# Produce output
print(wp.html_header('MITs', 'TextTasks'))
if not mit_list and not flagged_list:
    print("&lt;p&gt;No @mit's or flagged emails found :-D&lt;/p&gt;")
else:
    print('''
    &lt;script&gt;
        function open_mail(client, msgid) {
            if (client === "outlook") {
                cmd = "mdfind com_microsoft_outlook_recordID == " + msgid + " -0 | xargs -0 open";
            } else {
                // Assume Mail.app
                cmd = "open message://%3C" + msgid + "%3E"
            }
            obj = TextMate.system(cmd, null);
        }
    &lt;/script&gt;
    ''')
    print('&lt;h2&gt;Tasks&lt;/h2&gt;')
    for mit in mit_list:
        html = format_output(mit)
        print(html) #.encode('utf-8')
    print('&lt;h2&gt;Due soon&lt;/h2&gt;')
    for due in due_list:
        html = format_output(due)
        print(html) # .encode('utf-8')
    print('&lt;h2&gt;Delegated&lt;/h2&gt;')
    for delegated in delegated_list:
        html = format_output(delegated)
        print(html) #.encode('utf-8')
    print('&lt;h2&gt;Flagged emails&lt;/h2&gt;')
    for flagged in flagged_list:
        html = format_flagged_email(flagged)
        print(html) #.encode('utf-8')
print(wp.html_footer())

</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^m</string>
	<key>name</key>
	<string>List MITs</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>html</string>
	<key>outputLocation</key>
	<string>newWindow</string>
	<key>scope</key>
	<string>text.texttasks</string>
	<key>uuid</key>
	<string>2E89C723-DFCC-4B4E-9503-7FE127D4D3BA</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
