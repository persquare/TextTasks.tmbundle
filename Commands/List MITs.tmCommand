<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env python
# encoding: utf-8

"""List tasks tagged with @mit in the HTML companion view as clickable links."""

import os
import sys
import re
from datetime import datetime, date, timedelta
import urllib


envvars = ['TM_BUNDLE_SUPPORT', 'TM_SUPPORT_PATH']
sys.path[:0] = [os.environ[v]+'/lib' for v in envvars if os.environ[v] not in sys.path]

import tt_helpers as tth
import exit_codes as exit
import webpreview as wp
import applewrap

def format_output(task):
    FMT = u'&lt;p&gt;%s : &lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/p&gt;'
    TXMT_URL = u'txmt://open?url=file://%s&amp;line=%d&amp;column=%d'

    url = TXMT_URL % (task['file'], task['line'], 0)
    description = task['description'].decode('utf-8')
    notes = [task[key].decode('utf-8') for key in ['delegated', 'due'] if key in task]
    if notes:
        description += u" ({})".format(", ".join(notes))

    return FMT % (task['project'], url, description)

def format_flagged_email(flagged):
    """_flagged_ is a tuple with (from, subject, message_id)"""
    sender, task, msg_id = flagged
    msg_id = urllib.quote("&lt;{}&gt;".format(msg_id))
    FMT = u'&lt;p&gt;{} : &lt;a href="{}"&gt;{}&lt;/a&gt; &lt;/p&gt;'
    MSG_URL = u'message://{}'
    url = MSG_URL.format(msg_id)
    return FMT.format(sender, url, task)

def filter_due_list(due_list):
    then = date.today() + timedelta(days=15)
    new_list = []
    for due in due_list:
        due_string = due['due'].strip()
        try:
            when = datetime.strptime(due_string[-8:], "%y-%m-%d")
        except:
            # Badly formatted, don't list
            when = datetime.now() + timedelta(days=100)
        when = when.date()
        if when &lt; then:
            new_list.append(due)
    new_list = sorted(new_list, key=lambda k: k['due'])        
    return new_list

def scan_all_projects_for_tag(tag):
    TAGGED_TASK_TEMPLATE = r"^(\s*)-\s+(.+?)\s(?:\s*@.+?\s)*?@%s(?:\((.*?)\)\s*)?(?:\s*@.+?)*\s*$"
    regex = TAGGED_TASK_TEMPLATE % tag
    tagged_tasks = projects.scan_all_projects(regex)
    for task in tagged_tasks:
        task[tag] = task['match'].group(3)
        task['description'] = task['match'].group(2)
    return tagged_tasks

def scan_all_projects_for_tags():
    TAGGED_TASK_TEMPLATE = r"^(\s*)-\s+(.+?)\s(?:\s*@.+?\s)*?@%s(?:\((.*?)\)\s*)?(?:\s*@.+?)*\s*$"
    regex = TAGGED_TASK_TEMPLATE % tag
    tagged_tasks = projects.scan_all_projects(regex)
    for task in tagged_tasks:
        task[tag] = task['match'].group(3)
        task['description'] = task['match'].group(2)
    return tagged_tasks

# FIXME: Extract all tags at once, then filter on tag
projects = tth.Projects()
mit_list = scan_all_projects_for_tag('mit')
due_list = scan_all_projects_for_tag('due')
delegated_list = scan_all_projects_for_tag('delegated')
# Check dates
due_list = filter_due_list(due_list)
# Remove mits from due list
mit_tasks = [mit['task'] for mit in mit_list]
due_list = [due for due in due_list if due['task'] not in mit_tasks]
# Remove delegated from mit and due lists
delegated_tasks = [delegated['task'] for delegated in delegated_list]
due_list = [due for due in due_list if due['task'] not in delegated_tasks]
mit_list = [mit for mit in mit_list if mit['task'] not in delegated_tasks]
# Get flagged emails
flagged_list = applewrap.Mail().get_flagged_emails()

# Produce output
if not mit_list and not flagged_list:
    text = "&lt;p&gt;No @mit's or flagged emails found :-D&lt;/p&gt;"
    try:
        import subprocess
        text += "&lt;p&gt;&lt;pre&gt;" + subprocess.check_output(['/usr/local/bin/fortune', os.environ['FORTUNE_LIST']]) + "&lt;/pre&gt;&lt;/p&gt;"
        # text = subprocess.check_output(['/usr/local/bin/fortune', '/Users/eperspe/Source/FOSS/fortune/fortunes/fortunes'])
    except:
        pass
    print wp.html_header('MITs', 'TextTasks')
    print text
    print wp.html_footer()
else:
    print wp.html_header('MITs', 'TextTasks')
    print '&lt;h2&gt;Tasks&lt;/h2&gt;'
    for mit in mit_list:
        html = format_output(mit)
        print html.encode('utf-8')
    print '&lt;h2&gt;Due soon&lt;/h2&gt;'
    for due in due_list:
        html = format_output(due)
        print html.encode('utf-8')
    print '&lt;h2&gt;Delegated&lt;/h2&gt;'
    for delegated in delegated_list:
        html = format_output(delegated)
        print html.encode('utf-8')
    print '&lt;h2&gt;Flagged emails&lt;/h2&gt;'
    for flagged in flagged_list:
        html = format_flagged_email(flagged)
        print html.encode('utf-8')
    print wp.html_footer()

</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^m</string>
	<key>name</key>
	<string>List MITs</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>html</string>
	<key>outputLocation</key>
	<string>newWindow</string>
	<key>scope</key>
	<string>text.texttasks</string>
	<key>uuid</key>
	<string>2E89C723-DFCC-4B4E-9503-7FE127D4D3BA</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
