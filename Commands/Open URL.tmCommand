<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env python -S

"""Open a link (or Markdown style reference link) in TextMate's companion window."""

import os
import sys
import re

envvars = ['TM_BUNDLE_SUPPORT', 'TM_SUPPORT_PATH']
sys.path[:0] = [os.environ[v]+'/lib' for v in envvars if os.environ[v] not in sys.path]

import exit_codes as exit

MATCH_URL = r'.*?((?:https?://|file://|mailto:|message://)\S+)'
MATCH_REF_URL = r'.*?\[.+?\]\[(.+?)\]'
MATCH_REF_TEMPLATE = r'^.*?\[%s\]:(.+)'
MATCH_SCHEME = r'(.+?):'

def expand_reference(ref):
    MATCH_REF = MATCH_REF_TEMPLATE % (ref,)
    with sys.stdin as f:
        for line in f:
            line = line.rstrip()
            match = re.match(MATCH_REF, line)
            if match:
                return match.group(1)
    return None
            
def scan_line(line):
    """Scan line for URL or reference, return (URL or reference key, type)"""
    URL = None
    type = None
    # Check for direct URL first
    match = re.match(MATCH_URL, line)
    if match:
        return match.group(1)
    # Check for reference URL    
    match = re.match(MATCH_REF_URL, line)
    if not match:
        return None
    # So, it's a reference, scan doc for corresponding URL
    return expand_reference(match.group(1))
        
def open_in_browser(url):
    print "open in browser: %s" % (url)
    exit.discard()
     
def open_in_textmate(url):
   print """
    &lt;!DOCTYPE HTML&gt;
    &lt;html lang="en-US"&gt;
        &lt;head&gt;
            &lt;meta charset="UTF-8"&gt;
            &lt;script type="text/javascript"&gt;
                window.location.href = "%s"
            &lt;/script&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;/body&gt;
    &lt;/html&gt;
    """ % (url)

# Main script
if os.environ.get('TM_SELECTED_TEXT', None):
    print "handle selection"
    # TM_SCOPE
    # TM_SELECTION
else:
    line = os.environ['TM_CURRENT_LINE']
    line_number = os.environ['TM_LINE_NUMBER']

url = scan_line(line)
if not url:
    exit.discard()

# Check scheme    
# FIXME: Make this a setting?
# Will always match
match = re.match(MATCH_SCHEME, url)
scheme = match.group(1)
if scheme in ['http', 'https']:
    open_in_textmate(url)
else:
    os.system("open %s" % (url,))
    </string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>@l</string>
	<key>name</key>
	<string>Open URL</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>html</string>
	<key>outputLocation</key>
	<string>newWindow</string>
	<key>scope</key>
	<string>text.texttasks</string>
	<key>uuid</key>
	<string>F2CD0002-DF7F-48CC-BEBE-9D8821494FB8</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
